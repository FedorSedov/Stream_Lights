# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import classes
import func
import dictionaries
import json
import threading



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(973, 839)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ui_list = QtWidgets.QListWidget(self.centralwidget)
        self.ui_list.setGeometry(QtCore.QRect(20, 470, 291, 192))
        self.ui_list.setObjectName("ui_list")
        self.add_light_line = QtWidgets.QLineEdit(self.centralwidget)
        self.add_light_line.setGeometry(QtCore.QRect(20, 440, 191, 20))
        self.add_light_line.setObjectName("add_light_line")
        self.add_light_button = QtWidgets.QPushButton(self.centralwidget)
        self.add_light_button.setGeometry(QtCore.QRect(220, 440, 41, 21))
        self.add_light_button.setObjectName("add_light_button")
        self.delete_light_button = QtWidgets.QPushButton(self.centralwidget)
        self.delete_light_button.setGeometry(QtCore.QRect(20, 670, 75, 23))
        self.delete_light_button.setObjectName("delete_light_button")
        self.ui_table = QtWidgets.QTableWidget(self.centralwidget)
        self.ui_table.setGeometry(QtCore.QRect(350, 440, 511, 271))
        self.ui_table.setObjectName("ui_table")
        self.ui_table.setColumnCount(5)
        self.ui_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.ui_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ui_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ui_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ui_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ui_table.setHorizontalHeaderItem(4, item)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(700, 740, 261, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(870, 440, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(870, 500, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(130, 380, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(590, 320, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(890, 380, 16, 16))
        self.label_6.setObjectName("label_6")
        self.maxline = QtWidgets.QLineEdit(self.centralwidget)
        self.maxline.setGeometry(QtCore.QRect(440, 400, 71, 20))
        self.maxline.setObjectName("maxline")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(470, 370, 47, 13))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(380, 370, 47, 13))
        self.label_4.setObjectName("label_4")
        self.rline = QtWidgets.QLineEdit(self.centralwidget)
        self.rline.setGeometry(QtCore.QRect(750, 400, 51, 20))
        self.rline.setObjectName("rline")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(830, 380, 16, 16))
        self.label_5.setObjectName("label_5")
        self.gline = QtWidgets.QLineEdit(self.centralwidget)
        self.gline.setGeometry(QtCore.QRect(810, 400, 51, 20))
        self.gline.setObjectName("gline")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(770, 380, 16, 16))
        self.label_7.setObjectName("label_7")
        self.bline = QtWidgets.QLineEdit(self.centralwidget)
        self.bline.setGeometry(QtCore.QRect(870, 400, 51, 20))
        self.bline.setObjectName("bline")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(820, 360, 47, 13))
        self.label_8.setObjectName("label_8")
        self.minline = QtWidgets.QLineEdit(self.centralwidget)
        self.minline.setGeometry(QtCore.QRect(350, 400, 71, 20))
        self.minline.setObjectName("minline")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(20, 120, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(20, 10, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(50, 60, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.twitch_login = QtWidgets.QLineEdit(self.centralwidget)
        self.twitch_login.setGeometry(QtCore.QRect(140, 70, 151, 21))
        self.twitch_login.setStyleSheet("")
        self.twitch_login.setObjectName("twitch_login")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(80, 170, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.follower_effect = QtWidgets.QComboBox(self.centralwidget)
        self.follower_effect.setGeometry(QtCore.QRect(140, 170, 141, 22))
        self.follower_effect.setObjectName("follower_effect")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.follower_effect.addItem("")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(360, 170, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.follower_duration = QtWidgets.QSlider(self.centralwidget)
        self.follower_duration.setGeometry(QtCore.QRect(440, 170, 160, 22))
        self.follower_duration.setOrientation(QtCore.Qt.Horizontal)
        self.follower_duration.setObjectName("follower_duration")
        self.follower_duration.setMinimum(1)
        self.follower_duration.setMaximum(10)
        self.follower_duration.singleStep()
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(80, 270, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.sub_duration = QtWidgets.QSlider(self.centralwidget)
        self.sub_duration.setGeometry(QtCore.QRect(440, 270, 160, 22))
        self.sub_duration.setOrientation(QtCore.Qt.Horizontal)
        self.sub_duration.setObjectName("sub_duration")
        self.sub_duration.setMinimum(1)
        self.sub_duration.setMaximum(10)
        self.sub_duration.singleStep()
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(360, 270, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(20, 220, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.sub_effect = QtWidgets.QComboBox(self.centralwidget)
        self.sub_effect.setGeometry(QtCore.QRect(140, 270, 141, 22))
        self.sub_effect.setObjectName("sub_effect")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.sub_effect.addItem("")
        self.save_follower_settings = QtWidgets.QPushButton(self.centralwidget)
        self.save_follower_settings.setGeometry(QtCore.QRect(720, 170, 75, 23))
        self.save_follower_settings.setObjectName("save_follower_settings")
        self.save_sub_settings = QtWidgets.QPushButton(self.centralwidget)
        self.save_sub_settings.setGeometry(QtCore.QRect(720, 270, 75, 23))
        self.save_sub_settings.setObjectName("save_sub_settings")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 100, 991, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(0, 200, 991, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(-10, 300, 1011, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.follower_duration_line = QtWidgets.QLineEdit(self.centralwidget)
        self.follower_duration_line.setGeometry(QtCore.QRect(620, 170, 41, 20))
        self.follower_duration_line.setObjectName("follower_duration_line")
        self.sub_duration_line = QtWidgets.QLineEdit(self.centralwidget)
        self.sub_duration_line.setGeometry(QtCore.QRect(620, 270, 41, 20))
        self.sub_duration_line.setObjectName("sub_duration_line")
        self.save_twitch = QtWidgets.QPushButton(self.centralwidget)
        self.save_twitch.setGeometry(QtCore.QRect(320, 70, 75, 23))
        self.save_twitch.setObjectName("save_twitch")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(450, 60, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.donation_link = QtWidgets.QLineEdit(self.centralwidget)
        self.donation_link.setGeometry(QtCore.QRect(540, 70, 301, 21))
        self.donation_link.setStyleSheet("")
        self.donation_link.setObjectName("donation_link")
        self.donation_link_save = QtWidgets.QPushButton(self.centralwidget)
        self.donation_link_save.setGeometry(QtCore.QRect(870, 70, 75, 23))
        self.donation_link_save.setObjectName("donation_link_save")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.test_follower = QtWidgets.QPushButton(self.centralwidget)
        self.test_follower.setGeometry(QtCore.QRect(830, 170, 75, 23))
        self.test_follower.setObjectName("test_follower")
        self.test_sub = QtWidgets.QPushButton(self.centralwidget)
        self.test_sub.setGeometry(QtCore.QRect(830, 270, 75, 23))
        self.test_sub.setObjectName("test_sub")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(580, 370, 47, 13))
        self.label_18.setObjectName("label_18")
        self.follower_effect_2 = QtWidgets.QComboBox(self.centralwidget)
        self.follower_effect_2.setGeometry(QtCore.QRect(530, 400, 121, 22))
        self.follower_effect_2.setObjectName("follower_effect_2")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.follower_effect_2.addItem("")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(680, 370, 47, 13))
        self.label_19.setObjectName("label_19")
        self.donation_effect_duration = QtWidgets.QLineEdit(self.centralwidget)
        self.donation_effect_duration.setGeometry(QtCore.QRect(670, 400, 61, 20))
        self.donation_effect_duration.setObjectName("donation_effect_duration")
        self.add_light_button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.add_light_button_2.setGeometry(QtCore.QRect(270, 440, 41, 21))
        self.add_light_button_2.setObjectName("add_light_button_2")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(870, 470, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.excluded_ranges = QtWidgets.QLabel(self.centralwidget)
        self.excluded_ranges.setGeometry(QtCore.QRect(360, 720, 501, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.excluded_ranges.setFont(font)
        self.excluded_ranges.setText("")
        self.excluded_ranges.setObjectName("excluded_ranges")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_light_button.clicked.connect(self.add_light_to_list)
        self.pushButton_4.clicked.connect(self.add_donation_bracket)
        self.save_twitch.clicked.connect(self.save_twitch_f)
        self.donation_link_save.clicked.connect(self.donation_link_save_f)
        self.pushButton_3.clicked.connect(self.start)
        self.save_follower_settings.clicked.connect(self.selected_follow_effect)
        self.save_sub_settings.clicked.connect(self.selected_sub_effect)
        self.test_follower.clicked.connect(self.test_follower_f)
        self.sub_duration_line.textChanged.connect(self.sub_text_changed)
        self.follower_duration_line.textChanged.connect(self.follower_text_changed)
        self.sub_duration.valueChanged.connect(self.sub_changed_value)
        self.follower_duration.valueChanged.connect(self.changed_value)
        self.delete_light_button.clicked.connect(self.delete_light_from_list)
        self.ui_list.itemClicked.connect(self.show_light_from_list)
        self.add_light_button_2.clicked.connect(self.edit_light_from_list)
        self.pushButton_5.clicked.connect(self.delete_donation_bracket)
        self.ui_table.cellClicked.connect(self.show_donation_bracket)
        self.pushButton_6.clicked.connect(self.edit_donation_bracket)
        self.test_sub.clicked.connect(self.test_sub_f)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.add_light_button.setText(_translate("MainWindow", "Add"))
        self.delete_light_button.setText(_translate("MainWindow", "Delete"))
        item = self.ui_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Min"))
        item = self.ui_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Max"))
        item = self.ui_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Effect"))
        item = self.ui_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Duration"))
        item = self.ui_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Color"))
        self.pushButton_3.setText(_translate("MainWindow", "Start"))
        self.pushButton_4.setText(_translate("MainWindow", "Add"))
        self.pushButton_5.setText(_translate("MainWindow", "Delete"))
        self.label.setText(_translate("MainWindow", "Lights"))
        self.label_2.setText(_translate("MainWindow", "Donations"))
        self.label_6.setText(_translate("MainWindow", "B"))
        self.label_3.setText(_translate("MainWindow", "Max"))
        self.label_4.setText(_translate("MainWindow", "Min"))
        self.label_5.setText(_translate("MainWindow", "G"))
        self.label_7.setText(_translate("MainWindow", "R"))
        self.label_8.setText(_translate("MainWindow", "Color"))
        self.label_9.setText(_translate("MainWindow", "Followers"))
        self.label_10.setText(_translate("MainWindow", "Twitch"))
        self.label_11.setText(_translate("MainWindow", "Twitch Login"))
        self.label_12.setText(_translate("MainWindow", "Effect"))
        self.follower_effect.setItemText(0, _translate("MainWindow", "Disco"))
        self.follower_effect.setItemText(1, _translate("MainWindow", "Christmas"))
        self.follower_effect.setItemText(2, _translate("MainWindow", "Alarm"))
        self.follower_effect.setItemText(3, _translate("MainWindow", "Lsd"))
        self.follower_effect.setItemText(4, _translate("MainWindow", "Police"))
        self.follower_effect.setItemText(5, _translate("MainWindow", "Police2"))
        self.follower_effect.setItemText(6, _translate("MainWindow", "Strobe"))
        self.follower_effect.setItemText(7, _translate("MainWindow", "Strobe_color"))
        self.sub_effect.setItemText(0, _translate("MainWindow", "Disco"))
        self.sub_effect.setItemText(1, _translate("MainWindow", "Christmas"))
        self.sub_effect.setItemText(2, _translate("MainWindow", "Alarm"))
        self.sub_effect.setItemText(3, _translate("MainWindow", "Lsd"))
        self.sub_effect.setItemText(4, _translate("MainWindow", "Police"))
        self.sub_effect.setItemText(5, _translate("MainWindow", "Police2"))
        self.sub_effect.setItemText(6, _translate("MainWindow", "Strobe"))
        self.sub_effect.setItemText(7, _translate("MainWindow", "Strobe_color"))
        self.follower_effect_2.setItemText(0, _translate("MainWindow", "RGB"))
        self.follower_effect_2.setItemText(1, _translate("MainWindow", "Disco"))
        self.follower_effect_2.setItemText(2, _translate("MainWindow", "Christmas"))
        self.follower_effect_2.setItemText(3, _translate("MainWindow", "Alarm"))
        self.follower_effect_2.setItemText(4, _translate("MainWindow", "Lsd"))
        self.follower_effect_2.setItemText(5, _translate("MainWindow", "Police"))
        self.follower_effect_2.setItemText(6, _translate("MainWindow", "Police2"))
        self.follower_effect_2.setItemText(7, _translate("MainWindow", "Strobe"))
        self.follower_effect_2.setItemText(8, _translate("MainWindow", "Strobe_color"))
        self.label_18.setText(_translate("MainWindow", "Effect"))
        self.label_19.setText(_translate("MainWindow", "Duration"))
        self.label_13.setText(_translate("MainWindow", "Duration"))
        self.label_14.setText(_translate("MainWindow", "Effect"))
        self.label_15.setText(_translate("MainWindow", "Duration"))
        self.label_16.setText(_translate("MainWindow", "Subscribers"))
        self.save_follower_settings.setText(_translate("MainWindow", "Save"))
        self.save_sub_settings.setText(_translate("MainWindow", "Save"))
        self.save_twitch.setText(_translate("MainWindow", "Save"))
        self.label_17.setText(_translate("MainWindow", "Donation link"))
        self.donation_link_save.setText(_translate("MainWindow", "Save"))
        self.test_follower.setText(_translate("MainWindow", "Test"))
        self.test_sub.setText(_translate("MainWindow", "Test"))
        self.add_light_button_2.setText(_translate("MainWindow", "Edit"))
        self.pushButton_6.setText(_translate("MainWindow", "Edit"))

    def donation_link_save_f(self):
        """Функция сохранения donation_link"""
        dictionaries.donation_link.clear()
        link = self.donation_link.text()
        dictionaries.donation_link.append(str(link))
        with open('Donation.txt', 'w') as outfile:
            json.dump(dictionaries.donation_link, outfile, indent=4)

    def save_twitch_f(self):
        """Функция сохранения имени пользователя Twitch, от которого ведется трансляция"""
        dictionaries.twitch.clear()
        login = self.twitch_login.text()
        dictionaries.twitch.append(str(login))
        with open('Twitch.txt', 'w') as outfile:
            json.dump(dictionaries.twitch, outfile, indent=4)

    def add_light_to_list(self):
        """Фунция добавления новых девайсов по их IP.
        На данный момент в API Yeelight девайсов есть баг с автоматическим обнаружением,
         пока приходится вбивать вручную"""
        ip = self.add_light_line.text()
        if re.match('^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$',ip):
            self.add_light_line.clear()
            dictionaries.lights['bulb'].append(str(ip))
            rowPosition = self.ui_list.count()
            self.ui_list.insertItem(rowPosition, ip)
            with open('Lights.txt', 'w') as outfile:
                json.dump(dictionaries.lights, outfile, indent=4)
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Incorrect IP format!")

            x = msg.exec_()

    def add_donation_bracket(self):
        """Функция добавления нового интервала для пожертвований.
        На данный момент функция слишком массивная, много повторов и мест для оптимизации,
         необходимо разбить на более мелкие функции"""

        minn = self.minline.text()
        maxx = self.maxline.text()
        duration = self.donation_effect_duration.text()
        r = self.rline.text()
        g = self.gline.text()
        b = self.bline.text()

        if int(minn) >= 0 and (int(maxx) >= 0 and int(maxx) >= int(minn)) and (int(r) >= 0 and int(r) <= 255) and (
                int(g) >= 0 and int(g) <= 255) and (int(b) >= 0 and int(b) <= 255): # Проверка на корректность данных
            bracket = classes.donation_bracket(int(minn), int(maxx), str(self.follower_effect_2.currentText()), duration, [int(r), int(g), int(b)])
            list = [int(minn), int(maxx), str(self.follower_effect_2.currentText()), int(duration), [int(r), int(g), int(b)]]
            dictionaries.brackets['bracket'].append(list)
            dictionaries.brackets_classes.append(bracket)
            dictionaries.sort_brackets()
            error = None
            listt = []
            print(len(dictionaries.brackets_classes))
            if len(dictionaries.brackets_classes) <= 1:  # Если интервалов нету или он 1
                if self.ui_table.rowCount():  # очищаем таблицу
                    for r in range(self.ui_table.rowCount()):
                        self.ui_table.removeRow(0)
                for row in range(len(dictionaries.brackets_classes)):  # заполняем раннее отсортированными данными
                    self.ui_table.insertRow(row)
                    self.ui_table.setItem(row, 0,
                                          QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].min)))
                    self.ui_table.setItem(row, 1,
                                          QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].max)))
                    self.ui_table.setItem(row, 2,
                                          QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].effect)))
                    self.ui_table.setItem(row, 3,
                                          QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].duration)))
                    self.ui_table.setItem(row, 4,
                                          QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].color)))
                with open('Brackets.txt', 'w') as outfile:  # сохранение в файл
                    json.dump(dictionaries.brackets, outfile, indent=4)
            else:
                if len(dictionaries.brackets_classes) == 2:
                    for j in range(1, len(dictionaries.brackets_classes)):
                        if dictionaries.brackets_classes[j - 1].max + 1 <= dictionaries.brackets_classes[j].min:
                            listt.append(
                                [dictionaries.brackets_classes[j - 1].max + 1, dictionaries.brackets_classes[j].min - 1])
                        if dictionaries.brackets_classes[j].min <= dictionaries.brackets_classes[j - 1].max:
                            error = j
                    if listt:
                        list_string = 'Excluded ranges: '
                        for r in listt:
                            list_string = list_string + str(r[0]) + ' - ' + str(r[1]) + ', '
                        string = list_string[:-1]
                        self.excluded_ranges.setText(string)
                    if not error:
                        for r in range(self.ui_table.rowCount()):
                            self.ui_table.removeRow(0)
                        for row in range(len(dictionaries.brackets_classes)):
                            self.ui_table.insertRow(row)
                            self.ui_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].min)))
                            self.ui_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].max)))
                            self.ui_table.setItem(row, 2, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].effect)))
                            self.ui_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].duration)))
                            self.ui_table.setItem(row, 4, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].color)))
                        with open('Brackets.txt', 'w') as outfile:
                            json.dump(dictionaries.brackets, outfile, indent=4)
                    else:
                        msg = QMessageBox()
                        msg.setWindowTitle("Error")
                        msg.setText("Min is grater than max of the next bracket!")
                        dictionaries.brackets['bracket'].pop(error)
                        dictionaries.brackets_classes.pop(error)
                        x = msg.exec_()

                else:
                    error = None
                    for j in range(1, len(dictionaries.brackets_classes)):
                        if dictionaries.brackets_classes[j - 1].max + 1 <= dictionaries.brackets_classes[j].min:
                            listt.append(
                                [dictionaries.brackets_classes[j - 1].max + 1, dictionaries.brackets_classes[j].min - 1])
                    if listt:
                        list_string = 'Excluded ranges: '
                        for r in listt:
                            list_string = list_string + str(r[0]) + ' - ' + str(r[1]) + ', '
                        string = list_string[:-1]
                        self.excluded_ranges.setText(string)
                    for i in range(1, len(dictionaries.brackets_classes) - 1):
                        if dictionaries.brackets_classes[i].min <= dictionaries.brackets_classes[i - 1].max or dictionaries.brackets_classes[i].max >= dictionaries.brackets_classes[i + 1].min:
                            error = i
                    if not error:
                        for r in range(self.ui_table.rowCount()):
                            self.ui_table.removeRow(0)
                        for row in range(len(dictionaries.brackets_classes)):
                            self.ui_table.insertRow(row)
                            self.ui_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].min)))
                            self.ui_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].max)))
                            self.ui_table.setItem(row, 2, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].effect)))
                            self.ui_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].duration)))
                            self.ui_table.setItem(row, 4, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].color)))
                        with open('Brackets.txt', 'w') as outfile:
                            json.dump(dictionaries.brackets, outfile, indent=4)
                    else:
                        msg = QMessageBox()
                        msg.setWindowTitle("Error")
                        msg.setText("Min is grater than max of the next bracket!")
                        dictionaries.brackets['bracket'].pop(error)
                        dictionaries.brackets_classes.pop(error)
                        x = msg.exec_()
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Incorrect data!")
            msg.exec_()

    def delete_donation_bracket(self):
        """Функция удаления интервала пожертвований"""
        selected_row = self.ui_table.currentRow()
        self.ui_table.removeRow(selected_row)
        dictionaries.brackets['bracket'].pop(selected_row)
        dictionaries.brackets_classes.pop(selected_row)
        with open('Brackets.txt', 'w') as outfile:
            json.dump(dictionaries.brackets, outfile, indent=4)

    def show_donation_bracket(self):
        """Функция для показа выделленого интервала выше таблицы для возможности редактирования"""
        selected_row = self.ui_table.currentRow()
        selected_bracket = dictionaries.brackets_classes[selected_row]
        self.minline.setText(str(selected_bracket.min))
        self.maxline.setText(str(selected_bracket.max))
        self.follower_effect_2.setCurrentText(str(selected_bracket.effect))
        self.donation_effect_duration.setText(str(selected_bracket.duration))
        self.rline.setText(str(selected_bracket.color[0]))
        self.gline.setText(str(selected_bracket.color[1]))
        self.bline.setText(str(selected_bracket.color[2]))

    def edit_donation_bracket(self):
        """Функция для сохранения измененного интервала"""
        new_min = self.minline.text()
        new_max = self.maxline.text()
        new_effect = self.follower_effect_2.currentText()
        new_duration = self.donation_effect_duration.text()
        new_rline = self.rline.text()
        new_gline = self.gline.text()
        new_bline = self.bline.text()
        selected_row = self.ui_table.currentRow()
        selected_bracket = dictionaries.brackets_classes[selected_row]
        selected_bracket.min = int(new_min)
        selected_bracket.max = int(new_max)
        selected_bracket.effect = str(new_effect)
        selected_bracket.duration = str(new_duration)
        selected_bracket.color = [new_rline, new_gline, new_bline]
        dictionaries.brackets['bracket'][selected_row][0] = int(new_min)
        dictionaries.brackets['bracket'][selected_row][1] = int(new_max)
        dictionaries.brackets['bracket'][selected_row][2] = str(new_effect)
        dictionaries.brackets['bracket'][selected_row][3] = int(new_duration)
        dictionaries.brackets['bracket'][selected_row][4][0] = int(new_rline)
        dictionaries.brackets['bracket'][selected_row][4][1] = int(new_gline)
        dictionaries.brackets['bracket'][selected_row][4][2] = int(new_bline)
        dictionaries.sort_brackets()
        error = None
        i = 1
        for i in range(len(dictionaries.brackets_classes) - 1):
            if dictionaries.brackets_classes[i].min >= dictionaries.brackets_classes[i - 1].max and \
                    dictionaries.brackets_classes[i].max <= dictionaries.brackets_classes[i + 1].min:
                error = i

        if error:
            for r in range(self.ui_table.rowCount()):
                self.ui_table.removeRow(0)
            for row in range(len(dictionaries.brackets_classes)):
                self.ui_table.insertRow(row)
                self.ui_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].min)))
                self.ui_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].max)))
                self.ui_table.setItem(row, 2,
                                      QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].effect)))
                self.ui_table.setItem(row, 3,
                                      QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].duration)))
                self.ui_table.setItem(row, 4, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].color)))
            with open('Brackets.txt', 'w') as outfile:
                json.dump(dictionaries.brackets, outfile, indent=4)
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Min is grater than max of the next bracket!")
            # dictionaries.brackets['bracket'].pop(error)
            # dictionaries.brackets_classes.pop(error)
            x = msg.exec_()
        '''for row in range(len(dictionaries.brackets_classes)):
            self.ui_table.insertRow(row)
            self.ui_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].min)))
            self.ui_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].max)))
            self.ui_table.setItem(row, 2, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].effect)))
            self.ui_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].duration)))
            self.ui_table.setItem(row, 4, QtWidgets.QTableWidgetItem(str(dictionaries.brackets_classes[row].color)))'''
        '''with open('Brackets.txt', 'w') as outfile:
            json.dump(dictionaries.brackets, outfile, indent=4)'''


    def selected_follow_effect(self):
        dictionaries.saved_effects['follow_effect'].clear()
        dictionaries.saved_effects['follow_duration'].clear()
        dictionaries.saved_effects['follow_effect'].append(str(self.follower_effect.currentText()))
        dictionaries.saved_effects['follow_duration'].append(str(self.follower_duration.value()))
        with open('saved_effects.txt', 'w') as outfile:
            json.dump(dictionaries.saved_effects, outfile, indent=4)

    def selected_sub_effect(self):
        dictionaries.saved_effects['sub_effect'].clear()
        dictionaries.saved_effects['sub_duration'].clear()
        dictionaries.saved_effects['sub_effect'].append(str(self.sub_effect.currentText()))
        dictionaries.saved_effects['sub_duration'].append(str(self.sub_duration.value()))
        with open('saved_effects.txt', 'w') as outfile:
            json.dump(dictionaries.saved_effects, outfile, indent=4)

    def changed_value(self):
        size = str(self.follower_duration.value())
        self.follower_duration_line.setText(size)

    def follower_text_changed(self):
        size = int(self.follower_duration_line.text())
        self.follower_duration.setValue(size)

    def sub_changed_value(self):
        size = str(self.sub_duration.value())
        self.sub_duration_line.setText(size)

    def sub_text_changed(self):
        size = int(self.sub_duration_line.text())
        self.sub_duration.setValue(size)

    def start(self):
        func.start_monitoring()
        self.pushButton_3.setText('Started')

    def test_follower_f(self):
        t = threading.Thread(target=func.test_follow_effect, daemon=True)
        t.start()

    def test_sub_f(self):
        t = threading.Thread(target=func.test_sub_effect, daemon=True)
        t.start()

    def delete_light_from_list(self):
        selected_row  = self.ui_list.currentRow()
        self.ui_list.takeItem(selected_row)
        dictionaries.lights['bulb'].pop(selected_row)
        with open('Lights.txt', 'w') as json_file:
            json.dump(dictionaries.lights, json_file, indent=4)

    def show_light_from_list(self):
        item = self.ui_list.currentItem()
        self.add_light_line.setText(item.text())

    def edit_light_from_list(self):
        item = self.ui_list.currentItem()
        selected_row = self.ui_list.currentRow()
        new_text = self.add_light_line.text()
        item.setText(new_text)
        #dictionaries.lights['bulb']
        dictionaries.lights['bulb'][selected_row] = str(new_text)
        with open('Lights.txt', 'w') as json_file:
            json.dump(dictionaries.lights, json_file, indent=4)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    size = str(ui.follower_duration.value())
    ui.follower_duration_line.setText(size)

    size = str(ui.sub_duration.value())
    ui.sub_duration_line.setText(size)

    # Дальше идет загрузка раннее сохраненных данных из файлов
    with open('saved_effects.txt') as json_file:
        data = json.load(json_file)
        for b in data:
            ui.follower_effect.setCurrentText(data['follow_effect'][0])
            ui.follower_duration.setValue(int(data['follow_duration'][0]))
            ui.sub_effect.setCurrentText(data['sub_effect'][0])
            ui.sub_duration.setValue(int(data['sub_duration'][0]))
        dictionaries.saved_effects['follow_effect'].append(data['follow_effect'][0])
        dictionaries.saved_effects['follow_duration'].append(data['follow_duration'][0])
        dictionaries.saved_effects['sub_effect'].append(data['sub_effect'][0])
        dictionaries.saved_effects['sub_duration'].append(data['sub_duration'][0])

    with open('Twitch.txt') as json_file:
        data = json.load(json_file)
        for b in data:
            dictionaries.twitch.append(b)
            ui.twitch_login.setText(b)
    with open('Donation.txt') as json_file:
        data = json.load(json_file)
        for d in data:
            dictionaries.donation_link.append(d)
            ui.donation_link.setText(d)
    with open('Lights.txt') as json_file:
        data = json.load(json_file)
        for b in data['bulb']:
            dictionaries.lights['bulb'].append(b)
            rowPosition = ui.ui_list.count()
            ui.ui_list.insertItem(rowPosition, b)
    with open('Brackets.txt') as json_file1:
        data = json.load(json_file1)
        for p in data['bracket']:
            dictionaries.brackets['bracket'].append(p)
            bracket = classes.donation_bracket(p[0], p[1], p[2], p[3], p[4])
            dictionaries.brackets_classes.append(bracket)
            rowPosition = ui.ui_table.rowCount()
            ui.ui_table.insertRow(rowPosition)
            ui.ui_table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(str(bracket.min)))
            ui.ui_table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(str(bracket.max)))
            ui.ui_table.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(str(bracket.effect)))
            ui.ui_table.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem(str(bracket.duration)))
            ui.ui_table.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(str(bracket.color)))
    '''y = threading.Thread(target=func.print_threads, daemon=True)
    y.start()'''
    sys.exit(app.exec_())

